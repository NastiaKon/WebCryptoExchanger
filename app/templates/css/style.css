/* Меняет цвет и выравнивание у тэга с id="header" */
#header {
color:#c32017;
text-align: center;
text-transform: uppercase;
border: 2px solid #FAA21A; 
}
/*Определение свойств класса (в index.html должен быть где-то прописан class="new"- у <div> или <span>)*/
.new2 { font-style:italic; }
.new {
color:#6bc5e3;
font-weight:bold;
}
/* Установка свойст у всех дочерних эл-тов тэга списка - <ul> */
/* ul li { color:#cc0000; border: 1px solid #cccccc; } */
/* Наследование свойст для всех дочерних эл-тов тэга от id="bt"  */
/* #bt p a { color:#FAA21A; } */

/*============================= Изменение цвета ссылок (a) ===============================*/
/* a:link { color: #111111; }		- не нажатой*/
/* a:visited { color: #FAA21A; }	- уже нажатой*/
/* a:hover { color: #800000; }		- наведенной*/
/* a:active { color: #008000; }		- в момент нажатия*/

/*==================== Единые свойства у нескольких тэгов через "," ===================== */
p , h3, #myList {
color:#404040
}

/*================================== Всё о шрифтах:====================================== */
p { 
/*
Вид шрифта (font-family):
Tahoma - если есть,...нет - использовать "Times New Roman", кавычки - "много слов",
если нет ни того ни другого - использовать любой из семейства - sans-serif:
*/
font-family: Tahoma, "Times New Roman", sans-serif;
/*
Единицы измерения размера шрифта (font-size):
				Базовый размер
%  -проценты	100%
em -единицы		1em
px -пиксели		16px
pt -пункты		12pt
xx-small..small, medium, large...xx-large - ключевые слова <> на 20%
*/
font-size: 16px;
/*
Шрифт курсивом (font-style):
font-style:italic;
Насыщиность (жирность) шрифта:
font-weight:normal | bold или 100,200...900
часто используется в <span class="new2"></span> и div.
*/
font-weight: normal;
/*
Декорирование текста (подчеркнуть, надчеркнуть сверху, перечеркнуть, убрать черту)
text-decoration:underline | overline | line-through | none;
none -убирает черту у ссылок. 
*/
text-decoration: underline;
/*
Выравнивание текста (по левому краю, по центру, по правому краю, равномерно):
text-align: left | center | right | justify;
*/
text-align: left;
/*
Красная строка (отступ):
text-indent: 20px;
*/
text-indent: 20px;
/*Изменение различных интервалов в тексте: */
/*Межстрочный интервал:
line-height:16px; (все тоже как и для font-size)
можно указывать числа 1 | 1.5 | 2 - это множитель на font-size */
line-height: 16px;
/*Интервал между словами:
word-spacing: 12px | normal; */
/*Интервал между буквами:
letter-spacing: 3px | normal;*/
/*Изменение регистра текста (только заглавными, строчными, каждое слово с заглавной):
text-transform: uppercase | lowercase | capitalize; */
}
/*Сокращенная запись для фонта:
[ font-style || font-variant || font-weight ]? <font-size> [/line-heght]? <font-family>
||-в любом сочетании, ?-группа не обязательная, <>-обязательная, /-можно указать через "/"
Пример краткой записи свойств шрифта: */
.new3 { font: italic bold 16px/20px Tahoma; }
/*<font-size>(16px) и  <font-family>(Tahoma) - указывать при этом обязательно. */

/*================================== Всё о рамках:====================================== */
/* 1.Размер рамки: 
border-width:2px;*/

/* 2.Стиль рамки: 
border-style: dotted (точками) | dashed (пунктиром) | solid (сплошная) | double (двойная) |
groove | ridge | inset (снизу-справа серая) | outset (сверху-слева серая) */

/* 3.Цвет рамки: 
border-color: #FAA21A;*/
 
/* Можно указывать для каждой линии рамки отдельно:
border-[top,rigth,bottom,left]-[width,style,color] */

/* Краткая запись для рамки:
[border-width || bolder-style || border-color]
Например:  border:2px dotted #FAA21A;
или: border-top:2px dotted #FAA21A; */

/*================================== Всё о списках:====================================== 
1.Какие метки элементов списка отображать (кружки, квадратики, цифры с точкой, буквы с точкой и т.д.):
list-style-type: none | circle | disc | square | decimal | lower-alpha | lower-latin и т.д.
ul { list-style-type: square; } */

/*2.Позиция метки элементов списка (внутри, снаружи списка):
list-style-position: inside | outside ; */

/*3.Картинка в качестве метки элементов списка: 
ul { list-style-image:url(../images/arrow.png); } */

/* Краткая запись свойств элементов списка: 
[list-style-type || list-style-position || list-style-image] */
/* Например: */
ul {list-style: outside url(../images/arrow.png); }

/* ============================== Всё о Наследовании ============================================
Если прописать свойства для тэга body, то многие тэги унаследуют эти свойства, 
если они для них не заданы явно или если его не переопределяет свойство ближайщего родителя:
body -> ul -> li (ближайший для li: ul)
body {
font: 14px Tahoma; 			- свойства шрифта наследуются всеми элементами
color: #00065B;				- свойство цвета также наследуется
border: 2px solid #FAA21A;	- свойство рамки не наследуется (см. справочник: inherited) 
} */
/*Приоритет наследования стилей:
+1000 балов. Встроенный в html стиль: <li style="color:#97057F">....</li>
 +100 балов. ID-селектора: 			<li id="name_id">....</li>  => в css: #name_id { color:#97057F; }
  +10 балов. Селектор классов:		<li class="cls1">....</li>	=> в css: .cls1 { color:#97057F; }
   +1 балов. Селектор тэгов:										   в css: li { color:#97057F; }
Если это отключить, то идёт наследование сначала от ближ. родителя <ul>, потом от <body>.
Если селекторы стилей набирают равное кол-во балов, то используется последний в css.*/

/*====================================== Всё про блочные тэги и отступы =====================================
Каждый тэг - это контейнер у которого есть содержимое, внутренние отступ (padding), внешние поля (margin)
а также рамка (border). Блок занимает пространство равное сумме всех этих элементов.
Сам браузер выставляет некоторые отступы для тэгов. Если надо убрать эти отступы - надо прописать: */
#header {
padding: 0;
margin: 0;
/* border: 2px; */
}
/* Если надо указывать разные отступы с разных сторон, то указывается по час. стрелке (top, rigth, bottom, left): 
padding [-top-rigth-bottom-left]: 10px 20px 15px 25px;	Или так:  margin: 20px 10px; => верх-низ, право-лево */

/* Ширина блока (СОДЕРЖИМОГО):
width: 550px; или width: 50%; (50%-от max. ширины) */

/* Высота блока (СОДЕРЖИМОГО):
height: 300px;
Если СОДЕРЖИМОЕ не влезет в 300px - то лишнее вывалится и залезет на нижние строки, и это соответствует:
overflow: visible; [hidded -не показывать лишнее | auto -появится полоса прокрутки | scroll -полосы прокрутки всегда] */

/* Выравнивание СОДЕРЖИМОГО в блоке по центру:
margin: 10px auto 10px auto;    или   margin: 10px auto; (т.е. автоматические отступы с двух сторон)
Если надо отцентровать всю страницу и вписать в ширину = 1000px + (вн.отступы x 2) + (внеш.поля x 2):
body {
padding: 10px;
margin: 0 auto;
width: 1000px;
} */

/* Конфликт полей -  урок 20:
1. Если внешн. поле верх. элемента накладывается на внешн. поле нижнего элемента, то браузер выбирает наибольшее поле,
т.е. эти поля не складываются и расстояние не увеличивается.
2. Конфликт полей для вложенных элементов. Например, если есть <div> и в него вложен параграф <p>, то если
и для div и для p задать margin-top различного размера, то браузер выбирает наибольшее поле,
т.е. эти поля не складываются и расстояние не увеличивается.
Но если для них установить не нулевой border, то поля появятся и расстояние увеличится. 
И вобще лучше делать отступы с помощью padding. */

/* Встроенные элементы - это элементы встроенные в блоки (обычно выделяются тэгами <span>, <strong>=(<b> - устаревш.),
<em>=(<i> - устаревш.), <a>. Встроенные эл-ты не занимают всю строку, а ровно столько сколько надо его контенту.
Если выделить фрагмент текста тэгом <dev>, то он образует блок (текст начнётся с новой строки).
1. Встроенные элементы должны быть внутри блочных. Встроенный эл-т может содержать либо текст либо другие
встроенные эл-ты. Блочный эл-т может содержать текст, встроенные эл-ты и другие блочные эл-ты. 
Так нельзя: <span>...<dev> ... </dev>...</span>, или  так <strong>...<p> ... </p>...</strong>.
Встроенные элементы не имеют top и bottom. Если для них задать margin-top или margin-bottom, то ничего не изменится.*/

/*Блочный эл-т можно преобразовать во вложенный c помощью display:inline , например нумерованный список:
Эл-ты списка пойдут друг за другом в одну линию через 1 пробел.*/
ol li {
display: inline;
border: 1px solid #333333;
}
/* Встроенный эл-т можно преобразовать в блочный, он начнётся с начала строки и займет всю строку, например:
#span1 { display:block; } */

/*========================================== Использование фоновых изображений ===================================== */
/*------------Урок 22: Вставка фонового цвета/изображения в какой-то блок ----------------------
		В CSS-2 для одного блока можно указать только одно фоновое изображение (рисунок или фрагмент рисунка).
body {
background-color: #c3c3c3; } <- Это цвет фона для всей страницы. Надо всегда указывать цвет для блока, а потом уже рисунок.
								т.к. если рисунки отключены - на их месте будет фоновый цвет.
#main {
width: 800px;
height: 421px;				<- ширина и высота блока <dev id="main">
margin: 29px auto;			< Отступ сверху-снизу 29px, слева-справа посредине
outline: 1px solid #FAA21A;  <- рамка вокруг блока+отступы <dev id="main">
background-image: url(../images/bd.jpg); }	<- картинка фона блока <dev id="main"> 

#main h1 {
	text-align: center;			<- выравнивание заголовка по центру
	outline: 1px solid #CC0000;  <- рамка вокруг заголовка h1 блока <dev id="main"> + отступы
	padding-top: 182px;			<- отступ от верхнего края блока <dev id="main">
	font: 36px Verdana;}
*/
/*------------- Урок 23: Как замостить небольшим, однообразным рисунком фон блока -------------------
Если есть небольшой, однородный фрагмент картинки, то можно замостить весь блок этим фрагментом.
Это ускорит загрузку страницы:
background-repeat: repeat;		<- по умолчанию повторяет фрагмент по оси х и у.
background-repeat: repeat-x;	<- повторяет фрагмент по оси х (только одна горизонтальная полоска)
background-repeat: repeat-y;	<- повторяет фрагмент по оси y (только одна вертикальная полоска)
background-repeat: no-repeat;	<- отключает повторение (фрагмент будет в верхнем левом углу блока)
*/
/*------------- Урок 24: Фиксация фоновой картинки в определенном месте блока --------------------
Если надо разместить фрагмент фона в определенном месте блока (а не в верхнем левом углу), то надо использовать:
background-position: [позиция верхнего угла фрагмента по горизонтали]px [позиция верхнего угла фрагмента по вертикали]px;
Например:
background-image: url(../images/logo.png);	<- указываем какую картинку надо взять
background-repeat: no-repeat;				<- запрещаем повторение
background-position: 124px 187px; 			<- картинка сдвигается на 124px по X и на 187px по Y от краёв блока.

Вместо 124px можно указывать (по горизонтали): [left] || [center] || [right],
Вместо 187px можно указывать (по вертикали):   [top]  || [center] || [bottom].
*/
/*-------- Урок 25: Как зафиксировать картинку на одном месте, чтобы прокрутка не влияла на её местоположение ----------
Если надо прикрепить картинку в определенном месте сайта так, что бы при прокрутке страницы картинка 
оставалась всегда на одном месте, надо использовать директиву - background-attachment: fixed;.
Например:
#wrapper {									<- создаём ещё один блок <dev id="wrapper">, который обертывает 
											блок <div: #main> и занимает всё пространство и свойства BODY
background-image: url(../images/tel.jpg);	<- указываем какую картинку надо зафиксировать в блоке "wrapper" 
background-repeat: no-repeat;				<- запрещаем повторение
background-position: 0 120px; 				<- картинка распологается слева и на 120px от верха блока "wrapper"
background-attachment: fixed; }				<- картинка фиксируется слева и на 120px теперь уже от верха BODY 
*/
/*------------------------- Урок 26: Краткая запись свойст фонового цвета/изображения ------------------------------------
Последовательность должна быть такая, но все свойства не обязательны:
background: [background-color] || [background-image] || [background-repeat] || [background-attachment] || [background-position]
Например, можно переписать предыдущий фрагмент кода:
#wrapper {
background: url(../images/tel.jpg) no-repeat fixed 0 120px; }
*/
/*========================================== Описание таблиц в css =====================================
-----Это определения для параграфа - "Новая таблица с описанием в style.css с выравниванием посредине:"*/
#p_new {
	text-decoration: none;
	text-align: center;
}
/*------------------------- Урок 27: Как задать оформление блоков таблицы ----------------------------------*/
table.second-table, table.second-table td, table.second-table th {
	border: 1px solid #cccccc;	/* Цвет бордюра всех ячеек - серый */
	text-align: center;			/* Выравнивание во всех ячейках - посередине */
}
table.second-table {
	width: 700px;				/* Ширина всей таблицы - 700px */
	border-collapse: collapse;	/* Слипание линии бордюра в одну линию */
	margin: 25px auto;			/* Выравнивание всей таблицы посередине страницы */
}
table.second-table td, table.second-table th {
	height: 30px;				/* Высота каждой ячейки таблицы - 30px */
	padding: 5px;				/* Отступ текста в каждой ячейке - 5px */
	vertical-align: middle;		/* Вертикальное выравнивание: Можно использовать также top, bottom, baseline */
	background-color: #CEEFFF;	/* Цвет фона ячеек - беллый - #ffffff */
}
table.second-table th {
	background-image: url(../images/tablebg.jpg); /* Фоновая картинка заголовка таблицы */
}
/*
table.second-table tr.blue td {
	background-color: #CEEFFF;	<- Можно сделать фон для каждой строчки (tr) таблицы с класом "blue" - голубым (каждой второй).
}*/
/*================ Урок 28: Оформление формы с помощью css (form_css.html,  style_form.css) =====================
*/
/*================ Урок 30: Плавающие элементы (float) (indexF.html и style_F.css) =====================
Необходимо всегда указывать ширину (width) блока перед директивой float иначе блок займет всю щирину контента. */
#myImg {
	float: right;
	border: none;
	margin: 20px 0 20px 50px;
}
/* Создание каркаса сайта с помощью плавающих элементов см. в indexF.html и style_F.css
там же способ подключения скриптов jquery и выравнивание трёх блоков в js/equalHeight.js по наибольшему 
*/
/*================ Урок 34: Позиционирование (indexP.html и style_P.css) =====================
position - даёт возможность закрепить картинку, приподнять её над тегами, так что они не занимают её место.
position: absolute; - даёт возможность позиционировать картинку относительно окна браузера либо блока с абсолютным поз-ем.
допустимые значения: absolute || relative || static || fixed
top: 50px;			- задаёт отступ позиции сверху (можно и bottom)
left: 50px;			- задаёт отступ позиции слева  (можно и right)
Если элемент вставлен в блок <div> с абсолютным позиционированием, то он начинает позиционироваться относительно его.

position: relative; - Делают обычно так: позиционируют блок header - relative (как бы поднимают его над потоком),
а затем позиционируют картинку (кнопку) - absolute, как бы относительно блока Header.

position: fixed; - Используют когда надо зафиксировать, например, ссылку с картинкой с левого края страницы,
так, чтобы прокрутка страницы не влияла на позицию этой картинки. Fixed всегда позиционирует объект относительно BODY.

position: static; - Это обычное позиционирование картинки внутри какого-либо блока.

z-index:2; - Чем выше значение z-index, тем больше объект накладывается на другие объекты (выходит на передний план).
*/
/* ================ Урок 39: Как скрыть отображение либо совсем убрать со сраницы объект ==============================
# test {
visibility: hidden (visible);	- скрывает (отображает) объект, т.ч. его место остаётся пустым
display: none;					- убирает объект со страницы, т.ч. его место занимают другие объекты.
}
*/
/* ================ Урок 40: Ограничение минимальной и максимальной ширины сайта (indexM.html style_M.css ===============
Для того, чтобы контент сайта не стягивался в узкую колонку на маленьких мониторах (с низким разрешением 800х600 рх)
обычно ограничивают #wrapper - min-width (не даёт бесконечно уменьшать - появляется горизонтальная полоса прокрутки). 
Для того, чтобы контент сайта не размазывался на больших мониторах - #wrapper обычно ограничивают по max-width
#wrapper {
margin: 30px auto;
background-color: #F4F4F4;
height: 520px;
min-width: 650px;
max-width: 1100px;
}
*/
/* ================= Урок 41: О том как отображать сайты в браузере MSIE 6 и ниже =====================================
*/
/* ================= Урок 43: Способы подключения стилей или css-файлов к сайту =======================================
1. В любом тэге index.html-файла можно использовать свойство <style>, которое будет определять стиль этого тэга.
2. В области <head></head> можно использовать парный тэг <style></style> и вписать в него всё, что есть в css-файле.
3. В области <head></head> можно подключить несколько css-файлов:
 <link href="css/style_1.css" type="text/css" rel="stylesheet">
 <link href="css/style_2.css" type="text/css" rel="stylesheet"> ...
4. В одном из css-файлов можно подключить следующий css-файл, с помощью директивы в начале:
@import url ("same.css");
*/
/* ================= Урок 44: Свойство inherit ========================================================================
Если надо чтобы элемент унаследовал какие-либо свойства от своего родителя (например: padding),
то в css можно создать для него селектор со свойством inherit:
#test_p {
padding: inherit;
}
*/
/* Образцы css-стилей можно посмотреть на сайте: http://www.csszengarden.com */

